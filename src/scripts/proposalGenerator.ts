import { type ProcessedFormValues } from "@/schemas/formSchemas";

export function generateProposal(values: ProcessedFormValues): string {

  const salaryTable: Record<string, number> = {
    Almoxarife: 2389,
    Apontador: 1925,
    Encanador: 2469,
    Vigia: 1779,
    Eletricista: 2469,
    Encarregado: 3195,
    "Meio-Oficial": 1925,
    Auxiliar: 1925,
    Ajudante: 1779,
    Profissional: 2389,
    T√©cnico: 2389,
    Mec√¢nico: 3000,
    Motoboy: 1925,
    "Motorista (Cat. B)": 2389,
    "Motorista (Cat. D)": 2478.6,
    "Operador de Trator": 1925,
  };

  const vrTable: Record<string, string> = {
    "Sorriso, Mato Grosso":
      "‚û° Fornecemos almo√ßo no local de segunda a sexta-feira e caf√© da manh√£ de segunda a s√°bado.",
    "Cuiab√°, Mato Grosso":
      "‚û° Vale Refei√ß√£o, considerando o valor de R$16,00 por dia √∫til trabalhado.",
    "Rondon√≥polis, Mato Grosso":
      "‚û° Vale Refei√ß√£o, considerando o valor de R$20,00 por dia √∫til trabalhado.",
    "Sinop, Mato Grosso":
      "‚û° Vale Refei√ß√£o, considerando o valor de R$20,00 por dia √∫til trabalhado.",
    "Alta Floresta, Mato Grosso":
      "‚û° Vale Refei√ß√£o, considerando o valor de R$20,00 por dia √∫til trabalhado.",
    "Patos, Para√≠ba":
      "‚û° Vale Refei√ß√£o, considerando o valor de R$20,00 por dia √∫til trabalhado.",
  };

  const scheduleTable: Record<string, { weekday: { start: string; end: string; break: string }; saturday: { start: string; end: string } }> = {
    "Sorriso, Mato Grosso": {
      weekday: { start: "07:30", end: "16:30", break: "1h" },
      saturday: { start: "07:30", end: "11:30" }
    },
    "Cuiab√°, Mato Grosso": {
      weekday: { start: "07:30", end: "16:30", break: "1h" },
      saturday: { start: "07:30", end: "11:30" }
    },
    "default": {
      weekday: { start: "07:00", end: "17:00", break: "2h" },
      saturday: { start: "07:00", end: "11:00" }
    }
  };

  // Benef√≠cios

  const benefitsConfig = {
    periculosidade: [
      "eletricista",
      "instalador de equipamentos de refrigera√ß√£o e ventila√ß√£o",
      "motoboy"
    ],
    insalubridade: [
      "encanador",
      "serralheiro"
    ],
    premioAtividades: [
      "t√©cnico", "eletricista", "encarregado", "meio-oficial", 
      "ajudante", "profissional"
    ],
    cafeManha: [
      "t√©cnico", "eletricista", "encarregado", "meio-oficial", 
      "ajudante", "profissional"
    ]
  };

  const checklistPremiums: Record<string, number> = {
    "n√≠vel 1": 100,
    "n√≠vel 2": 200,
    "n√≠vel 3": 300
  };

  const motoristaPremium = 500;

  // Ajustes de sal√°rio

  const jobLower = values.finalJob.toLowerCase();
  const complementLower = values.jobComplement?.toLowerCase() || "";
  
  const nivelJobs = ["motoboy", "operador de trator"];
  const hasNivelJob = nivelJobs.some(job => jobLower.includes(job));
  
  if (hasNivelJob) {
    const isNivel2Or3 = complementLower.includes("n√≠vel 2") || complementLower.includes("n√≠vel 3");
    const adjustedSalary = isNivel2Or3 ? 2389 : 1925;
    
    if (jobLower.includes("motoboy")) salaryTable["Motoboy"] = adjustedSalary;
    if (jobLower.includes("operador de trator")) salaryTable["Operador de Trator"] = adjustedSalary;
  }

  // Fun√ß√µes auxiliares

  const getSchedules = (location: string) => {
    return scheduleTable[location] || scheduleTable.default;
  };

  const getAttendance = (job: string) => 
    job.toLowerCase().includes("ajudante") ? 395 : 250;

  const hasAnyKeyword = (text: string, keywords: string[]) => 
    keywords.some(keyword => text.includes(keyword));

  const getAddictionals = (job: string, jobComplement?: string) => {
    const addictionals: string[] = [];
    const jobText = job.toLowerCase();
    const complementText = jobComplement?.toLowerCase() || "";
    const fullText = `${jobText} ${complementText}`;

    // Periculosidade

    if (hasAnyKeyword(fullText, benefitsConfig.periculosidade)) {
      addictionals.push("‚û° 30% de periculosidade sobre o sal√°rio base.");
    }

    // Insalubridade

    if (hasAnyKeyword(fullText, benefitsConfig.insalubridade)) {
      addictionals.push("‚û° 20% de insalubridade sobre o sal√°rio m√≠nimo vigente.");
    }

    // Pr√™mio por atividades excepcionais e caf√© da manh√£

    const shouldAddPremium = hasAnyKeyword(fullText, benefitsConfig.premioAtividades) || 
      (jobText.includes("auxiliar") && 
       complementText.includes("instalador de equipamentos de refrigera√ß√£o e ventila√ß√£o") &&
       !hasAnyKeyword(complementText, ["mec√¢nico", "almoxarifado"]));

    if (shouldAddPremium) {
      addictionals.push(
        "‚û° Pr√™mio por atividades excepcionais.",
        "‚û° Fornecemos caf√© da manh√£ no local de trabalho de segunda a s√°bado."
      );
    }

    // Pr√™mios de checklist para motoristas

    if (jobText.includes("motorista")) {
      addictionals.push(`‚û° R$${motoristaPremium} de Pr√™mio por entrega de checklist do ve√≠culo (mensal).`);
    }

    // Pr√™mios de checklist para motoboy e operador de trator

    const nivelJobs = ["motoboy", "operador de trator"];
    if (hasAnyKeyword(jobText, nivelJobs)) {
      for (const [nivel, premio] of Object.entries(checklistPremiums)) {
        if (complementText.includes(nivel)) {
          addictionals.push(`‚û° R$${premio} de Pr√™mio por entrega de checklist do ve√≠culo (mensal).`);
        }
      }
    }

    return addictionals.join("\n");
  };

  const salary = salaryTable[values.job] || 0;
  const vr = vrTable[values.location] || "";
  const attendance = getAttendance(values.finalJob);
  const addictionals = getAddictionals(values.finalJob, values.jobComplement);
  const schedule = getSchedules(values.location);

  return `
*PROPOSTA DE TRABALHO PARA ${values.finalJob.toUpperCase()} EM ${values.location.toUpperCase()}:*
üî∏Local: ${values.location.toUpperCase()}.
üî∏Fun√ß√£o: ${values.finalJob}.
üî∏Sal√°rio base de R$${salary}.
üî∏Modalidade ${values.modality}.
üî∏Contrata√ß√£o ${values.contractType}.

*Oferecemos:*
‚û° Seguro de vida.
‚û° Aux√≠lio Transporte, considerando o valor de R$09,90 por dia √∫til trabalhado.
${vr}
‚û° R$${attendance} de Pr√™mio Assiduidade, por m√™s completo de trabalho.
‚û° Conv√™nio BR5 assim que finalizado a admiss√£o.
${addictionals ? addictionals : ""}

*Hor√°rio de trabalho*
‚û° De segunda a sexta, das ${schedule.weekday.start} √°s ${schedule.weekday.end}, com intervalo de ${schedule.weekday.break}.
‚û° Aos s√°bados, das ${schedule.saturday.start} √°s ${schedule.saturday.end}, sem intervalos.

Proposta v√°lida por 15 dias ap√≥s envio.
`;
}